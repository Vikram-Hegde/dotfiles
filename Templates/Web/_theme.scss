/* Color styles */
$colors: (
	light: (
		text: (
			100: hsl(var(--h) var(--s) 15%),
			200: hsl(var(--h) var(--s) 10%),
		),
		surface: (
			100: hsl(var(--h) var(--s) 98%),
			200: hsl(var(--h) var(--s) 96%),
			300: hsl(var(--h) var(--s) 95%),
			400: hsl(var(--h) var(--s) 93%),
		),
	),
	dark: (
		text: (
			100: hsl(var(--h) var(--s) 15%),
			200: hsl(var(--h) var(--s) 10%),
		),
		surface: (
			100: hsl(var(--h) var(--s) 98%),
			200: hsl(var(--h) var(--s) 96%),
			300: hsl(var(--h) var(--s) 95%),
			400: hsl(var(--h) var(--s) 93%),
		),
	),
);

$utilities: (
	font-size: (
		100: 0.75rem,
		200: 1rem,
		300: 1.31rem,
		400: 1.78rem,
		500: 2.37rem,
		600: 3.16rem,
		700: 4.21rem,
	),
	spacing: (
		100: 1.5rem,
		200: 2.25rem,
		300: 3rem,
		400: 4.5rem,
		500: 6rem,
		600: 9rem,
	),
	code: (
		property: hsl(344, 85%, 60%),
		function: hsl(184, 85%, 40%),
		text: hsl(243, 39%, 70%),
		value: hsl(20, 90%, 60%),
		comments: hsl(230, 69%, 80%),
		version: hsl(244, 100%, 90%),
	),
);
@mixin color-scheme($type: light) {
	--accent: var(--accent-#{$type});
	@each $prop, $value in map-get($colors, $type) {
		@each $shade, $val in $value {
			--#{$prop}-#{$shade}: #{$val};
		}
	}
}

@mixin utilities($type) {
	$name: "util";
	@if $type == font-size {
		$name: "fs";
	}
	@if $type == spacing {
		$name: "sp";
	}
	@if $type == code {
		$name: "cc";
	}
	@each $prop, $value in map-get($utilities, $type) {
		--#{$name}-#{$prop}: #{$value};
	}
}

:root {
	--h: 243;
	--s: 100%;
	--l: 69%;
	--accent-light: hsl(var(--h), var(--s), var(--l));
	// Can used to be decrease saturation in dark themes.
	--accent-dark: var(--accent-light);
	/* Font size props */
	@include utilities(font-size);
	/* Spacing props */
	@include utilities(spacing);
	/* Colors for code */
	@include utilities(code);
}

[color-scheme="dark"] {
	@include color-scheme(dark);
}

[color-scheme="light"] {
	@include color-scheme(light);
}

@media (prefers-color-scheme: dark) {
	:root {
		@include color-scheme(dark);
	}
}
